{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Secrets Manager Builder Sessions Overview This is a collection of Builder Sessions that show how to use AWS Secrets Manager in different scenarios. Each Builder Session can be done separately. There is no dependency between the Builder Sessions. Each Builder Session takes one hour. Level : 300 Duration : one hour Prerequisites : AWS Account, Admin IAM User CSF Functions : Prevent CAF Components : Preventative AWS Services : AWS Secrets Manager Published Builder Sessions Using AWS Secrets Manager with Amazon RDS and AWS Fargate Additional Builder Sessions to come!","title":"Overview"},{"location":"#secrets-manager-builder-sessions","text":"","title":"Secrets Manager Builder Sessions"},{"location":"#overview","text":"This is a collection of Builder Sessions that show how to use AWS Secrets Manager in different scenarios. Each Builder Session can be done separately. There is no dependency between the Builder Sessions. Each Builder Session takes one hour. Level : 300 Duration : one hour Prerequisites : AWS Account, Admin IAM User CSF Functions : Prevent CAF Components : Preventative AWS Services : AWS Secrets Manager","title":"Overview"},{"location":"#published-builder-sessions","text":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate Additional Builder Sessions to come!","title":"Published Builder Sessions"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"RDSFargate/","text":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Scenario This Secrets Manager Builder Session guides you through the use of AWS Secrets Manager with Amazon RDS and AWS Fargate . In the first phase of the Builder Session, you will access the RDS data base with Secrets Manager. You will then use Secrets Manager to rotate the data base password. You will then use Secrets Manager to access the data base again to show that you can continue to access the data base after the rotation. In the second phase of the Builder Session, you will extend your use of Secrets Manager into an AWS Fargate container. You will create an Amazon ECS task definition to pass secrets to the Fargate container and then launch the Fargate container. You will then SSH into the container to show that the secret was passed to the container and that you can access the RDS data base. Level : 300 Duration : one hour Prerequisites : AWS Account, Admin IAM User Working knowledge of Amazon Linux 2 Working knowledge of both Docker and AWS Fargate An SSH client for your workstation and the ability to initiate outbound SSH connections CSF Functions : Prevent CAF Components : Preventative AWS Services : AWS Secrets Manager , Amazon RDS , AWS Fargate Before you Begin Please review the architecture diagram below. Workshop architecture This environment consists of a VPC with two subnets. The subnets containts an Amazon EC2 bastion host running Amazon Linux 2 used for running AWS CLI commands and a private, not publicly-accessible, Amazon RDS MySQL database instance. The subnets are chosen based on the availability of an interface VPC endpoint for AWS Secrets Manager. The VPC also contains an AWS Fargate container running the Amazon Linux 2 operating system. In the RDS and Fargate phases of the workshop, you will learn how to use AWS Secrets Manager to access the RDS database from both a standard EC2 instance and the Fargate container.","title":"Scenario"},{"location":"RDSFargate/#using-aws-secrets-manager-with-amazon-rds-and-aws-fargate-scenario","text":"This Secrets Manager Builder Session guides you through the use of AWS Secrets Manager with Amazon RDS and AWS Fargate . In the first phase of the Builder Session, you will access the RDS data base with Secrets Manager. You will then use Secrets Manager to rotate the data base password. You will then use Secrets Manager to access the data base again to show that you can continue to access the data base after the rotation. In the second phase of the Builder Session, you will extend your use of Secrets Manager into an AWS Fargate container. You will create an Amazon ECS task definition to pass secrets to the Fargate container and then launch the Fargate container. You will then SSH into the container to show that the secret was passed to the container and that you can access the RDS data base. Level : 300 Duration : one hour Prerequisites : AWS Account, Admin IAM User Working knowledge of Amazon Linux 2 Working knowledge of both Docker and AWS Fargate An SSH client for your workstation and the ability to initiate outbound SSH connections CSF Functions : Prevent CAF Components : Preventative AWS Services : AWS Secrets Manager , Amazon RDS , AWS Fargate Before you Begin Please review the architecture diagram below.","title":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Scenario"},{"location":"RDSFargate/#workshop-architecture","text":"This environment consists of a VPC with two subnets. The subnets containts an Amazon EC2 bastion host running Amazon Linux 2 used for running AWS CLI commands and a private, not publicly-accessible, Amazon RDS MySQL database instance. The subnets are chosen based on the availability of an interface VPC endpoint for AWS Secrets Manager. The VPC also contains an AWS Fargate container running the Amazon Linux 2 operating system. In the RDS and Fargate phases of the workshop, you will learn how to use AWS Secrets Manager to access the RDS database from both a standard EC2 instance and the Fargate container.","title":"Workshop architecture"},{"location":"RDSFargate/Fargate/","text":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Fargate Phase Prerequisites You must complete the RDS phase of this builder session before starting this phase. You should be familiar with Docker concepts. Overview In this phase, you will learn how to use AWS Secrets Manager with AWS Fargate. AWS Fargate is a compute engine for Amazon Elastic Container Service that allows you to run containers without having to manage servers or clusters. With AWS Fargate, you no longer have to provision, configure, and scale clusters of virtual machines to run containers. This removes the need to choose server types, decide when to scale your clusters, or optimize cluster packing. AWS Fargate removes the need for you to interact with or think about servers or clusters. Fargate lets you focus on designing and building your applications instead of managing the infrastructure that runs them. The CloudFormation template for this workshop round created a Dockerfile and some helper shell scripts. You will use these shell scripts to build the Docker image and push it to Amazon Elastic Container Registry (ECR), a fully-managed Docker container registry. This guide does not go into the details of these scripts. You are encouraged to read them to learn what they do to gain a better understanding of Docker, Amazon ECR, and AWS Fargate. Lastly as a reminder, the environment provisioned by CloudFormation is shown in the figure below. Build and push the Docker image If you are do not have a session open to the bastion host, then connect to the bastion host using AWS Systems Manager Session Manager. To do this: Go to the Systems Manager console . Click Session Manager . Click Start session . Select the radio button for the instance associated with the bastion host. Click Start session . The scripts you will be using are owned by the ec2-user account. If you are not currently using ec2-user as your effective user id, then enter the command below to change your effective user id and directory to those of ec2-user: sudo su - ec2-user Run this script to build the Docker image: ./dockerbuild.sh This command creates the Docker image based on the Dockerfile that was generated by CloudFormation. The build process can take a few minutes to complete. Wait until the shell prompts you for another command before continuing. Confirm that the image was built by using this command: docker images You should see a repository whose name contans -ecrre- that was recently built. Run the following script to push the image to Amazon ECR to make the image available to AWS Fargate: ./dockertagandpush.sh This script will take a few minutes to complete. Wait until the shell prompt appears before continuing. You have now built the Docker image and pushed it to Amazon ECR. You will now configure AWS Fargate. Configure and launch AWS Fargate You will now configure the Amazon Elastic Container Service Task Definition that AWS Fargate will use to launch the task. After you confgure the task definition, you will launch the AWS Fargate task. Go to the ECS console and select the Clusters menu item. You should see a cluster whose name begins with the stack name you chose and contains the string -ECSCluster- . The cluster description should look similar to that shown in the figure below. Click the Task Definitions menu item. You should see a task definition whose name contains -TaskDefinition- as shown below. Click the check box next to the appropriate task definition name and then click Create new revision . Leave all of the current values in place. Scroll down and click Configure via JSON . Look for the list named secrets . It should look similar to what is shown in the figure below. Replace SECRETNAME with the name of the secret you stoed in the RDS phase. Click Save to save the revised JSON definition. Click Create to create the new revision of the Task Definition that includes the JSON revisions. You will see a message saying that the new revision has been created. Notice that the revision has a version number attached to it as shown in the figure below. Click the Actions button and select Run Task from the dropdown menu. Choose the values listed in the table below. Field Value Launch type Fargate Cluster VPC The VPC that was created by CloudFormation with the 10.200.0.0/16 CIDR Subnets Select all of the subnets listed Security group Select the group whose name includes BastionSG Leave all other values at their current settings. Click Run Task . Refresh the Task window at the bottom to update the status. The status will start at PROVISIONING , then change to PENDING , and then to RUNNING*. Now that you have launched the Fargate task, you are ready to connect to the container. Connect to the Fargate contaner Click on the task name to display details of the task and note the private IP associated with the task. The private IP should begin with 10.200 . The third octet should be either 11 or 12. This private IP of the Fargate task has been connected to your VPC. From the Systems Manager Session Manager session you started above, while sudo'd as ec2-user, enter the following command: ssh PrvateIpOfFargateTask Replace PrivateIPOfFargateTask with the private IP of the Fargate task. You will be prompted for the password. Enter the value from the EC2UserPassword output value from the CloudFormation stack. You should now see a shell prompt. Access the database Now that you have connected to the AWS Fargate container, you can now access the RDS database. After you access the database you will learn how the scripts receive the secret value from the ECS Task Definition. Run the command below to access the RDS database. Note that you do not supply the name of a secret since that has been passed in the task definition. ./mysql.newway.sh use smdemo; show tables; select * from bookinfo; quit; The output should be similar to what you see in the figure below. Examine the flow of the secret Now that you have been able to access the database through Fargate, it's important to understand how the value made its way from the Task Definition to the mysql.newway.sh script. It's important to understand that there may be multiple ways to accomplish this depending on what is running in the container. Since this container is running a Linux shell, the path the secret value flowed took advantage of the capabilities of the shell. In the task definition JSON that you modified above, you modified the value of the valueFrom key to be the ARN of the secret that you stored in Secrets Manager. The corresponding name key has as its value the name of an environment variable that will be presented to the Fargate task container when it is instantiated. The Dockerfile that is used to build the Docker image for Fargate has the following as its last line: CMD /home/ec2-user/startprocesses.sh This means that when Fargate launches the Docker image, the image will run the startproceses.sh file. Here are the contents of the main portion of that file: touch / etc / profile . d / ecs . sh chmod 644 / etc / profile . d / ecs . sh env | \\ grep \"^TASKDEF_\" | \\ awk - F = '{printf \"export %s=%c%s%c\\n\", $1, 39, $2, 39 }' \\ >> / etc / profile . d / ecs . sh You can see that the startprocesses.sh script creates another script named /etc/profile.d/ecs.sh. Each line in ecs.sh contains the definitions of every environment variable passed to the container whose environment variable names start with TASKDEF_ . Since the file exists in the /etc/profile.d directory, each time a user logs in, the ecs.sh file willl be \"sourced\" by the shell causing the environment variables to be set for the logged in user. To confirm that the secret value has been passed, enter the following command from the Fargate container shell prompt: env|grep TASKDEF_SECRET You should see a value similar to that in the figure below. This shows that the Task Definition properly retrieved the secret information and passed it to the Fargate container which in turn made it available to the login shell. Conclusion You have completed ths Fargate phase and have learned how to use AWS Secrets Manager with AWS Fargate. Please proceed to the Clean up phase to remove the environment created by AWS CloudFormation.","title":"Fargate phase"},{"location":"RDSFargate/Fargate/#using-aws-secrets-manager-with-amazon-rds-and-aws-fargate-fargate-phase","text":"","title":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Fargate Phase"},{"location":"RDSFargate/Fargate/#prerequisites","text":"You must complete the RDS phase of this builder session before starting this phase. You should be familiar with Docker concepts.","title":"Prerequisites"},{"location":"RDSFargate/Fargate/#overview","text":"In this phase, you will learn how to use AWS Secrets Manager with AWS Fargate. AWS Fargate is a compute engine for Amazon Elastic Container Service that allows you to run containers without having to manage servers or clusters. With AWS Fargate, you no longer have to provision, configure, and scale clusters of virtual machines to run containers. This removes the need to choose server types, decide when to scale your clusters, or optimize cluster packing. AWS Fargate removes the need for you to interact with or think about servers or clusters. Fargate lets you focus on designing and building your applications instead of managing the infrastructure that runs them. The CloudFormation template for this workshop round created a Dockerfile and some helper shell scripts. You will use these shell scripts to build the Docker image and push it to Amazon Elastic Container Registry (ECR), a fully-managed Docker container registry. This guide does not go into the details of these scripts. You are encouraged to read them to learn what they do to gain a better understanding of Docker, Amazon ECR, and AWS Fargate. Lastly as a reminder, the environment provisioned by CloudFormation is shown in the figure below.","title":"Overview"},{"location":"RDSFargate/Fargate/#build-and-push-the-docker-image","text":"If you are do not have a session open to the bastion host, then connect to the bastion host using AWS Systems Manager Session Manager. To do this: Go to the Systems Manager console . Click Session Manager . Click Start session . Select the radio button for the instance associated with the bastion host. Click Start session . The scripts you will be using are owned by the ec2-user account. If you are not currently using ec2-user as your effective user id, then enter the command below to change your effective user id and directory to those of ec2-user: sudo su - ec2-user Run this script to build the Docker image: ./dockerbuild.sh This command creates the Docker image based on the Dockerfile that was generated by CloudFormation. The build process can take a few minutes to complete. Wait until the shell prompts you for another command before continuing. Confirm that the image was built by using this command: docker images You should see a repository whose name contans -ecrre- that was recently built. Run the following script to push the image to Amazon ECR to make the image available to AWS Fargate: ./dockertagandpush.sh This script will take a few minutes to complete. Wait until the shell prompt appears before continuing. You have now built the Docker image and pushed it to Amazon ECR. You will now configure AWS Fargate.","title":"Build and push the Docker image"},{"location":"RDSFargate/Fargate/#configure-and-launch-aws-fargate","text":"You will now configure the Amazon Elastic Container Service Task Definition that AWS Fargate will use to launch the task. After you confgure the task definition, you will launch the AWS Fargate task. Go to the ECS console and select the Clusters menu item. You should see a cluster whose name begins with the stack name you chose and contains the string -ECSCluster- . The cluster description should look similar to that shown in the figure below. Click the Task Definitions menu item. You should see a task definition whose name contains -TaskDefinition- as shown below. Click the check box next to the appropriate task definition name and then click Create new revision . Leave all of the current values in place. Scroll down and click Configure via JSON . Look for the list named secrets . It should look similar to what is shown in the figure below. Replace SECRETNAME with the name of the secret you stoed in the RDS phase. Click Save to save the revised JSON definition. Click Create to create the new revision of the Task Definition that includes the JSON revisions. You will see a message saying that the new revision has been created. Notice that the revision has a version number attached to it as shown in the figure below. Click the Actions button and select Run Task from the dropdown menu. Choose the values listed in the table below. Field Value Launch type Fargate Cluster VPC The VPC that was created by CloudFormation with the 10.200.0.0/16 CIDR Subnets Select all of the subnets listed Security group Select the group whose name includes BastionSG Leave all other values at their current settings. Click Run Task . Refresh the Task window at the bottom to update the status. The status will start at PROVISIONING , then change to PENDING , and then to RUNNING*. Now that you have launched the Fargate task, you are ready to connect to the container.","title":"Configure and launch AWS Fargate"},{"location":"RDSFargate/Fargate/#connect-to-the-fargate-contaner","text":"Click on the task name to display details of the task and note the private IP associated with the task. The private IP should begin with 10.200 . The third octet should be either 11 or 12. This private IP of the Fargate task has been connected to your VPC. From the Systems Manager Session Manager session you started above, while sudo'd as ec2-user, enter the following command: ssh PrvateIpOfFargateTask Replace PrivateIPOfFargateTask with the private IP of the Fargate task. You will be prompted for the password. Enter the value from the EC2UserPassword output value from the CloudFormation stack. You should now see a shell prompt.","title":"Connect to the Fargate contaner"},{"location":"RDSFargate/Fargate/#access-the-database","text":"Now that you have connected to the AWS Fargate container, you can now access the RDS database. After you access the database you will learn how the scripts receive the secret value from the ECS Task Definition. Run the command below to access the RDS database. Note that you do not supply the name of a secret since that has been passed in the task definition. ./mysql.newway.sh use smdemo; show tables; select * from bookinfo; quit; The output should be similar to what you see in the figure below.","title":"Access the database"},{"location":"RDSFargate/Fargate/#examine-the-flow-of-the-secret","text":"Now that you have been able to access the database through Fargate, it's important to understand how the value made its way from the Task Definition to the mysql.newway.sh script. It's important to understand that there may be multiple ways to accomplish this depending on what is running in the container. Since this container is running a Linux shell, the path the secret value flowed took advantage of the capabilities of the shell. In the task definition JSON that you modified above, you modified the value of the valueFrom key to be the ARN of the secret that you stored in Secrets Manager. The corresponding name key has as its value the name of an environment variable that will be presented to the Fargate task container when it is instantiated. The Dockerfile that is used to build the Docker image for Fargate has the following as its last line: CMD /home/ec2-user/startprocesses.sh This means that when Fargate launches the Docker image, the image will run the startproceses.sh file. Here are the contents of the main portion of that file: touch / etc / profile . d / ecs . sh chmod 644 / etc / profile . d / ecs . sh env | \\ grep \"^TASKDEF_\" | \\ awk - F = '{printf \"export %s=%c%s%c\\n\", $1, 39, $2, 39 }' \\ >> / etc / profile . d / ecs . sh You can see that the startprocesses.sh script creates another script named /etc/profile.d/ecs.sh. Each line in ecs.sh contains the definitions of every environment variable passed to the container whose environment variable names start with TASKDEF_ . Since the file exists in the /etc/profile.d directory, each time a user logs in, the ecs.sh file willl be \"sourced\" by the shell causing the environment variables to be set for the logged in user. To confirm that the secret value has been passed, enter the following command from the Fargate container shell prompt: env|grep TASKDEF_SECRET You should see a value similar to that in the figure below. This shows that the Task Definition properly retrieved the secret information and passed it to the Fargate container which in turn made it available to the login shell.","title":"Examine the flow of the secret"},{"location":"RDSFargate/Fargate/#conclusion","text":"You have completed ths Fargate phase and have learned how to use AWS Secrets Manager with AWS Fargate. Please proceed to the Clean up phase to remove the environment created by AWS CloudFormation.","title":"Conclusion"},{"location":"RDSFargate/RDS/","text":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - RDS Phase Overview In this phase, you will learn how to use AWS Secrets Manager for rotating the password for a private Amazon RDS database. As a reminder, the environment provisioned by CloudFormation is shown in the figure below. You will not be working with the AWS Fargate container in this phase so it is not shown below. Important For the sake of simplicity, this tutorial uses jq to parse the secret value into environment variables to allow for easy command line manipulation. This is NOT a security best practice for a production environment. In a production environment, we recommend that you don't store passwords in environment variables. Click here to read about the best practices for using Secrets Manager. View the CloudFormation stack Go to the CloudFormation console and identify the stack that you built. Make sure you are in the correct region. The list of stacks will look similar to the figure below. The appearance may vary based on the version of the console you are using. The red arrow points to a link with the name of the CloudFormation stack. If your stack was built by the AWS Event Engine, it will have a name that starts with mod- rather than the example below which uses smdemo . Click the stack name link to reveal more information about the stack as shown in the figure below. Click the Outputs tab as shown in the figure above to list the outputs of the stack which will be similar to the figure below. The meanings of the output values are described in the table below. Key Meaning of Value BastionIP The IP address of the bastion host DBInstance The Amazon RDS instance id DBPassword The master password of the RDS data base DBUser The master user of the RDS data base EC2UserPassword The password for the ec2-user id ECRRepository The ECR repository id ECSCluster The ECS cluster id You will need the values in the DBInstance, DBPassword, DBUser, and EC2UserPassword outputs in the next section so copy them to a file on your desktop so they are readily available. Store the secret In this section, you will store the RDS database credentials in AWS Secrets Manager. Go to the Secrets Manager console . Check your region to make sure the Secrets Manager console is operating in the correct region. If not, then switch your region into the region in which you deployed your CloudFomration stack. Click Store a new secret . Select the Credentials for RDS database radio button. Copy the values for the DBUser and DBPassword CloudFormation output values that you got from the CloudFormation stack into the User name and Password fields respectively. For the encryption key, Secrets Manager gives you the option of using the default KMS key that Secrets Manager creates for your account. This default key is managed by Secrets Manager itself. It provides encryption but you do not have the ability manage the policies or grants for the key. You can also specify your own KMS key which gives you more the option of configuring grants and policies that provide more granular permissions. In a production environment that requires fine-grained security controls, you would likely choose your own key. For this workshop we do not require these additional controls so select DefaultEncryptionKey in the dropdown menu. Scroll down to the bottom of the page and you will see a list of your RDS instances. Select the RDS instance based on the DBInstance CloudFormation output value. Click Next . Enter a name for the secret. You can pick a name or just use smdemo as shown below. Note that this must bot be the name of a secret that is pending deletion. Click Next . Select Disable automatic rotation and then click Next . We will enable rotation later in this module. Click Store . You have now stored your secret value as shown below. Access the database In this section, you will connect to the bastion host so you can run scripts that the CloudFormation template has created on the instance. Complete all the steps below unless they are marked \"optional.\" Connect to the bastion host using AWS Systems Manager Session Manager. To do this: Go to the Systems Manager console . Click Session Manager . Click Start session . Select the radio button for the instance associated with the bastion host. Click Start session . The scripts you will be using are owned by the ec2-user account. Enter the command below to change your effective user id and directory to those of ec2-user: sudo su - ec2-user Display the current directory using this command: ls You will see two shell scripts. mysql.oldway.sh - This shell script connects to the database the \"old\" way, using a hard-coded password. mysql.newway.sh - This shell script connects to the database the \"new\" way, using AWS Secrets Manager. View the file mysql.oldway.sh using this command: cat mysql.oldway.sh You will see contents similar to the lines below. The values PASSWORD, USER, and ENDPOINT represent the hard-coded database password, username, and host endpoint. ( Note : This code fragment is for illustration only and not intended for copying .) #/ bin / bash # mysql . oldway . sh # This is the old way of accessing a database , with a hard - coded password . # This script will only work right after the CloudFormation template runs . # After you store and rotate the secret , you will need to use the # mysql . newway . sh script . mysql \\ - pPASSWORD \\ - u USER \\ - P 3306 \\ - h ENDPOINT Test the script mysql.oldway.sh using the commands shown below. The first command invokes the script. The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. Note that MySQL commands end with a semicolon (\";\"). ./mysql.oldway.sh use smdemo; show tables; select * from bookinfo; quit; You can see an example of the output below. This shows that you can access the database, the \"old\" way, with a hard-coded user name and password. You may be wondering why MariaDB appears in the image below. Amazon Linux 2 includes the MariaDB port of the mysql command as an \"extras\" module. The mysql program is compatible with both MySQL and MariaDB. View the file mysql.newway.sh by entering this command: cat mysql.newway.sh Take a look at the lines below. ( Note : This code fragment is for illustration and not intended for copying .) getsecretvalue () { aws secretsmanager get - secret - value --secret-id $1 | \\ jq . SecretString | \\ jq fromjson } The above lines define a shell function that uses the AWS CLI to retrieve the secret whose name is passed as a command line argument ($1). The result is a JSON string so the jq utility is used to extract the actual value of the secret whose JSON key is named SecretString . Here is an example of what a SecretString looks like: ( Note : This code fragment is for illustration and not intended for copying .) { \"engine\" : \"mysql\" , \"username\" : \"myuser\" , \"password\" : \"mypassword\" , \"host\" : \"my-database-endpoint.us-east-1.rds.amazonaws.com\" , \"dbname\" : \"myDatabase\" , \"port\" : \"3306\" } Note that the SecretString itself is a JSON structure. Now look at the following lines. ( Note : This code fragment is for illustration and not intended for copying .) secret =` getsecretvalue $ 1 ` user = $ ( echo $ secret | jq - r . username ) password = $ ( echo $ secret | jq - r . password ) endpoint = $ ( echo $ secret | jq - r . host ) port = $ ( echo $ secret | jq - r . port ) These lines call the shell function and then use jq to extract the database username, password, endpoint, and port from the SecretString . These are then passed to the mysql command as shown on the lines below. Note that there is no space after the -p option. ( Note : This code fragment is for illustration and not intended for copying .) mysql \\ - p$password \\ - u $ user \\ - P $ port \\ - h $ endpoint Run the mysql.newway.sh script by running the commands below. The first command invokes the script. Note that you must specify the name of the secret! In this example, the secret's name is smdemo . The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. ./mysql.newway.sh smdemo use smdemo; show tables; select * from bookinfo; quit; You can see an example of the output below. This shows that you can access the database, the \"new\" way, using AWS Secrets Manager. Rotate the secret In this section, you will enable the rotation of the secret you created in AWS Secrets Manager. Go to the Secrets Manager console . Check your region to make sure the Secrets Manager console is operating in the correct region. If not, then switch your region into the region in which you deployed your CloudFomration stack. Click on the secret that you previously created. Click Edit rotation . Select Enable automatic rotation . Choose 30 days for the rotation interval. Select the Create a new Lambda function to perform rotation radio button. This will cause Secrets Manager to use CloudFormation on your behalf to create a rotation function using the AWS Serverless Application Repository. If you had customized your own rotation function or if you were using a credential for a special application, you would select that here. Enter a name for the rotation function. In the figure below, we used smdemo but you can select whatever you wish. You now need to select the secret whose permissions will be used to rotate the secret. For this Builder Session, select Use this secret. This will tell the rotation function to access the RDS database using the secret and rotate the same secret . If your application supports two classes of users, for example a \"superuser\" and a \"normal privilege\" user, you could select Use a secret that I have previously stored in Secrets Manager and use the \"superuser\" credential to rotate the credential for the \"normal privilege\" user. Your window should look similar to the figure below. Click Save . You will see a message telling you that the rotation is beginning and that you should remain on the page until it is complete. AWS Secrets Manager is now using the AWS Serverless Application Repository to install an AWS Lambda rotation function on your behalf. Do not leave this page until the rotation is complete. A message will appear when the rotation is complete. Refresh your browser window to update your any cached fields. Click Retrieve secret value to see the new password value. Access the database Let's try to connect to the database again, both the \"old\" way with a hard-coded password, the \"new\" way with AWS Secrets Manager. On the bastion host, run the command below to access the database using the hard-coded password. ./mysql.oldway.sh You should receive an error message (access denied) because the mysql.oldway.sh script has the same hard-coded password. Run the commands below to access the database with Secrets Manager by running the commands below. Note that you must specify the name of the secret! In this example, the secret's name is smdemo . You should be able to access the database as you did before because Secrets Manager fetches the new credential rather than using a hard-coded credential. ./mysql.newway.sh smdemo use smdemo; show tables; select * from bookinfo; quit; You have completed ths RDS phase and have learned how to use AWS Secrets Manager with Amazon RDS. You will now continue to the Fargate phase.","title":"RDS phase"},{"location":"RDSFargate/RDS/#using-aws-secrets-manager-with-amazon-rds-and-aws-fargate-rds-phase","text":"","title":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - RDS Phase"},{"location":"RDSFargate/RDS/#overview","text":"In this phase, you will learn how to use AWS Secrets Manager for rotating the password for a private Amazon RDS database. As a reminder, the environment provisioned by CloudFormation is shown in the figure below. You will not be working with the AWS Fargate container in this phase so it is not shown below. Important For the sake of simplicity, this tutorial uses jq to parse the secret value into environment variables to allow for easy command line manipulation. This is NOT a security best practice for a production environment. In a production environment, we recommend that you don't store passwords in environment variables. Click here to read about the best practices for using Secrets Manager.","title":"Overview"},{"location":"RDSFargate/RDS/#view-the-cloudformation-stack","text":"Go to the CloudFormation console and identify the stack that you built. Make sure you are in the correct region. The list of stacks will look similar to the figure below. The appearance may vary based on the version of the console you are using. The red arrow points to a link with the name of the CloudFormation stack. If your stack was built by the AWS Event Engine, it will have a name that starts with mod- rather than the example below which uses smdemo . Click the stack name link to reveal more information about the stack as shown in the figure below. Click the Outputs tab as shown in the figure above to list the outputs of the stack which will be similar to the figure below. The meanings of the output values are described in the table below. Key Meaning of Value BastionIP The IP address of the bastion host DBInstance The Amazon RDS instance id DBPassword The master password of the RDS data base DBUser The master user of the RDS data base EC2UserPassword The password for the ec2-user id ECRRepository The ECR repository id ECSCluster The ECS cluster id You will need the values in the DBInstance, DBPassword, DBUser, and EC2UserPassword outputs in the next section so copy them to a file on your desktop so they are readily available.","title":"View the CloudFormation stack"},{"location":"RDSFargate/RDS/#store-the-secret","text":"In this section, you will store the RDS database credentials in AWS Secrets Manager. Go to the Secrets Manager console . Check your region to make sure the Secrets Manager console is operating in the correct region. If not, then switch your region into the region in which you deployed your CloudFomration stack. Click Store a new secret . Select the Credentials for RDS database radio button. Copy the values for the DBUser and DBPassword CloudFormation output values that you got from the CloudFormation stack into the User name and Password fields respectively. For the encryption key, Secrets Manager gives you the option of using the default KMS key that Secrets Manager creates for your account. This default key is managed by Secrets Manager itself. It provides encryption but you do not have the ability manage the policies or grants for the key. You can also specify your own KMS key which gives you more the option of configuring grants and policies that provide more granular permissions. In a production environment that requires fine-grained security controls, you would likely choose your own key. For this workshop we do not require these additional controls so select DefaultEncryptionKey in the dropdown menu. Scroll down to the bottom of the page and you will see a list of your RDS instances. Select the RDS instance based on the DBInstance CloudFormation output value. Click Next . Enter a name for the secret. You can pick a name or just use smdemo as shown below. Note that this must bot be the name of a secret that is pending deletion. Click Next . Select Disable automatic rotation and then click Next . We will enable rotation later in this module. Click Store . You have now stored your secret value as shown below.","title":"Store the secret"},{"location":"RDSFargate/RDS/#access-the-database","text":"In this section, you will connect to the bastion host so you can run scripts that the CloudFormation template has created on the instance. Complete all the steps below unless they are marked \"optional.\" Connect to the bastion host using AWS Systems Manager Session Manager. To do this: Go to the Systems Manager console . Click Session Manager . Click Start session . Select the radio button for the instance associated with the bastion host. Click Start session . The scripts you will be using are owned by the ec2-user account. Enter the command below to change your effective user id and directory to those of ec2-user: sudo su - ec2-user Display the current directory using this command: ls You will see two shell scripts. mysql.oldway.sh - This shell script connects to the database the \"old\" way, using a hard-coded password. mysql.newway.sh - This shell script connects to the database the \"new\" way, using AWS Secrets Manager. View the file mysql.oldway.sh using this command: cat mysql.oldway.sh You will see contents similar to the lines below. The values PASSWORD, USER, and ENDPOINT represent the hard-coded database password, username, and host endpoint. ( Note : This code fragment is for illustration only and not intended for copying .) #/ bin / bash # mysql . oldway . sh # This is the old way of accessing a database , with a hard - coded password . # This script will only work right after the CloudFormation template runs . # After you store and rotate the secret , you will need to use the # mysql . newway . sh script . mysql \\ - pPASSWORD \\ - u USER \\ - P 3306 \\ - h ENDPOINT Test the script mysql.oldway.sh using the commands shown below. The first command invokes the script. The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. Note that MySQL commands end with a semicolon (\";\"). ./mysql.oldway.sh use smdemo; show tables; select * from bookinfo; quit; You can see an example of the output below. This shows that you can access the database, the \"old\" way, with a hard-coded user name and password. You may be wondering why MariaDB appears in the image below. Amazon Linux 2 includes the MariaDB port of the mysql command as an \"extras\" module. The mysql program is compatible with both MySQL and MariaDB. View the file mysql.newway.sh by entering this command: cat mysql.newway.sh Take a look at the lines below. ( Note : This code fragment is for illustration and not intended for copying .) getsecretvalue () { aws secretsmanager get - secret - value --secret-id $1 | \\ jq . SecretString | \\ jq fromjson } The above lines define a shell function that uses the AWS CLI to retrieve the secret whose name is passed as a command line argument ($1). The result is a JSON string so the jq utility is used to extract the actual value of the secret whose JSON key is named SecretString . Here is an example of what a SecretString looks like: ( Note : This code fragment is for illustration and not intended for copying .) { \"engine\" : \"mysql\" , \"username\" : \"myuser\" , \"password\" : \"mypassword\" , \"host\" : \"my-database-endpoint.us-east-1.rds.amazonaws.com\" , \"dbname\" : \"myDatabase\" , \"port\" : \"3306\" } Note that the SecretString itself is a JSON structure. Now look at the following lines. ( Note : This code fragment is for illustration and not intended for copying .) secret =` getsecretvalue $ 1 ` user = $ ( echo $ secret | jq - r . username ) password = $ ( echo $ secret | jq - r . password ) endpoint = $ ( echo $ secret | jq - r . host ) port = $ ( echo $ secret | jq - r . port ) These lines call the shell function and then use jq to extract the database username, password, endpoint, and port from the SecretString . These are then passed to the mysql command as shown on the lines below. Note that there is no space after the -p option. ( Note : This code fragment is for illustration and not intended for copying .) mysql \\ - p$password \\ - u $ user \\ - P $ port \\ - h $ endpoint Run the mysql.newway.sh script by running the commands below. The first command invokes the script. Note that you must specify the name of the secret! In this example, the secret's name is smdemo . The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. ./mysql.newway.sh smdemo use smdemo; show tables; select * from bookinfo; quit; You can see an example of the output below. This shows that you can access the database, the \"new\" way, using AWS Secrets Manager.","title":"Access the database"},{"location":"RDSFargate/RDS/#rotate-the-secret","text":"In this section, you will enable the rotation of the secret you created in AWS Secrets Manager. Go to the Secrets Manager console . Check your region to make sure the Secrets Manager console is operating in the correct region. If not, then switch your region into the region in which you deployed your CloudFomration stack. Click on the secret that you previously created. Click Edit rotation . Select Enable automatic rotation . Choose 30 days for the rotation interval. Select the Create a new Lambda function to perform rotation radio button. This will cause Secrets Manager to use CloudFormation on your behalf to create a rotation function using the AWS Serverless Application Repository. If you had customized your own rotation function or if you were using a credential for a special application, you would select that here. Enter a name for the rotation function. In the figure below, we used smdemo but you can select whatever you wish. You now need to select the secret whose permissions will be used to rotate the secret. For this Builder Session, select Use this secret. This will tell the rotation function to access the RDS database using the secret and rotate the same secret . If your application supports two classes of users, for example a \"superuser\" and a \"normal privilege\" user, you could select Use a secret that I have previously stored in Secrets Manager and use the \"superuser\" credential to rotate the credential for the \"normal privilege\" user. Your window should look similar to the figure below. Click Save . You will see a message telling you that the rotation is beginning and that you should remain on the page until it is complete. AWS Secrets Manager is now using the AWS Serverless Application Repository to install an AWS Lambda rotation function on your behalf. Do not leave this page until the rotation is complete. A message will appear when the rotation is complete. Refresh your browser window to update your any cached fields. Click Retrieve secret value to see the new password value.","title":"Rotate the secret"},{"location":"RDSFargate/RDS/#access-the-database_1","text":"Let's try to connect to the database again, both the \"old\" way with a hard-coded password, the \"new\" way with AWS Secrets Manager. On the bastion host, run the command below to access the database using the hard-coded password. ./mysql.oldway.sh You should receive an error message (access denied) because the mysql.oldway.sh script has the same hard-coded password. Run the commands below to access the database with Secrets Manager by running the commands below. Note that you must specify the name of the secret! In this example, the secret's name is smdemo . You should be able to access the database as you did before because Secrets Manager fetches the new credential rather than using a hard-coded credential. ./mysql.newway.sh smdemo use smdemo; show tables; select * from bookinfo; quit; You have completed ths RDS phase and have learned how to use AWS Secrets Manager with Amazon RDS. You will now continue to the Fargate phase.","title":"Access the database"},{"location":"RDSFargate/build/","text":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Build Phase Environment setup To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Click here to proceed to the RDS Phase. Click here if you're not using AWS Event Engine or are using your own account To setup the workshop environment, make sure you are logged in as an admin user and launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use a production AWS account from the company you work for. We strongly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. US East 1 (N. Virginia) US East 2 (Ohio) US West 1 (N. California) US West 2 (Oregon) EU West 1 (Ireland) EU West 2 (London) AP South 1 (Mumbai) AP SouthEast 2 (Sydney) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: Field name Field value Stack name You can choose or just use smdemo Enter the name of the database Accept the default value of smdemo Enter the TCP port for the database endpoint Accept the default value of 3306 Enter a prefix for the Name tag Accept the default value of smdemo Enter the value for the Project tag Accept the default value of smproj Enter the SSM AMI Id Parameter Accept the default value for the most recent AMI Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. You can now proceed to the RDS Phase .","title":"Build phase"},{"location":"RDSFargate/build/#using-aws-secrets-manager-with-amazon-rds-and-aws-fargate-build-phase","text":"","title":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Build Phase"},{"location":"RDSFargate/build/#environment-setup","text":"To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Click here to proceed to the RDS Phase. Click here if you're not using AWS Event Engine or are using your own account To setup the workshop environment, make sure you are logged in as an admin user and launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use a production AWS account from the company you work for. We strongly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. US East 1 (N. Virginia) US East 2 (Ohio) US West 1 (N. California) US West 2 (Oregon) EU West 1 (Ireland) EU West 2 (London) AP South 1 (Mumbai) AP SouthEast 2 (Sydney) Click Next on the Specify Template section. On the Specify stack details step, update the following parameters depending on how you are doing this workshop: Field name Field value Stack name You can choose or just use smdemo Enter the name of the database Accept the default value of smdemo Enter the TCP port for the database endpoint Accept the default value of 3306 Enter a prefix for the Name tag Accept the default value of smdemo Enter the value for the Project tag Accept the default value of smproj Enter the SSM AMI Id Parameter Accept the default value for the most recent AMI Click Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. You can now proceed to the RDS Phase .","title":"Environment setup"},{"location":"RDSFargate/cleanup/","text":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Clean Up Phase If you are at an AWS event where the Event Engine is being used, you are done! Clean up is handled automatically. Click here if you are using your own account or at an AWS event and Event Engine is not being used. Now that you have seen how AWS Secrets Manager can rotate the credentials for a private database and with AWS Fargate, please follow these steps to remove the resources you created, including the private database. If you do not have a session open to the bastion host, then connect to the bastion host using AWS Systems Manager Session Manager. To do this: Go to the Systems Manager console . Click Session Manager . Click Start session . Select the radio button for the instance associated with the bastion host. Click Start session . The scripts you will be using are owned by the ec2-user account. If you are not currently using ec2-user as your effective user id, then enter the command below to change your effective user id and directory to those of ec2-user: sudo su - ec2-user Run the command below to perform the Fargate clean up tasks. ./cleanup.sh The command will stop any Fargate Tasks, ungregister task definitions, and delete the Amazon ECS cluster and the Amazon ECR repository. The output will be similar to that shown in the figure below. Delete the secret you created in Secrets Manager . When you go to the Secrets Manager console, you should check the region and make sure you are operating in the region in which the CloudFormation stack was deployed. Also when you delete a secret in the console, the deletion is scheduled for a minimum of seven days in the future. When you enabled rotation on your secret, AWS Secrets Manager used AWS CloudFormation on your behalf to create an AWS Lambda function to do the rotation using the AWS Serverless Application Repository. Delete the CloudFormation stack whose name begins with the following string: aws-serverless-repository-SecretsManagerRDSMySQLRotationSingleUser Look for a stack with this naming convention that was created at about the same time as you enabled rotation. Do not proceed to the next step until this stack has been deleted. The stack deletion process may take as much as one hour because of Lambda-related network activity. Delete the main CloudFormation stack . The name of the stack is the name you chose during the Build Phase. The stack deletion process may take several minutes to complete. If the stack deletion process either pauses or fails, it may be because of an Elastic Network Interface that gets created when rotation is enabled. In this case, delete the Elastic Network Interface and try deleting the CloudFormation stack again.","title":"Clean up phase"},{"location":"RDSFargate/cleanup/#using-aws-secrets-manager-with-amazon-rds-and-aws-fargate-clean-up-phase","text":"If you are at an AWS event where the Event Engine is being used, you are done! Clean up is handled automatically. Click here if you are using your own account or at an AWS event and Event Engine is not being used. Now that you have seen how AWS Secrets Manager can rotate the credentials for a private database and with AWS Fargate, please follow these steps to remove the resources you created, including the private database. If you do not have a session open to the bastion host, then connect to the bastion host using AWS Systems Manager Session Manager. To do this: Go to the Systems Manager console . Click Session Manager . Click Start session . Select the radio button for the instance associated with the bastion host. Click Start session . The scripts you will be using are owned by the ec2-user account. If you are not currently using ec2-user as your effective user id, then enter the command below to change your effective user id and directory to those of ec2-user: sudo su - ec2-user Run the command below to perform the Fargate clean up tasks. ./cleanup.sh The command will stop any Fargate Tasks, ungregister task definitions, and delete the Amazon ECS cluster and the Amazon ECR repository. The output will be similar to that shown in the figure below. Delete the secret you created in Secrets Manager . When you go to the Secrets Manager console, you should check the region and make sure you are operating in the region in which the CloudFormation stack was deployed. Also when you delete a secret in the console, the deletion is scheduled for a minimum of seven days in the future. When you enabled rotation on your secret, AWS Secrets Manager used AWS CloudFormation on your behalf to create an AWS Lambda function to do the rotation using the AWS Serverless Application Repository. Delete the CloudFormation stack whose name begins with the following string: aws-serverless-repository-SecretsManagerRDSMySQLRotationSingleUser Look for a stack with this naming convention that was created at about the same time as you enabled rotation. Do not proceed to the next step until this stack has been deleted. The stack deletion process may take as much as one hour because of Lambda-related network activity. Delete the main CloudFormation stack . The name of the stack is the name you chose during the Build Phase. The stack deletion process may take several minutes to complete. If the stack deletion process either pauses or fails, it may be because of an Elastic Network Interface that gets created when rotation is enabled. In this case, delete the Elastic Network Interface and try deleting the CloudFormation stack again.","title":"Using AWS Secrets Manager with Amazon RDS and AWS Fargate - Clean Up Phase"},{"location":"RDSFargate/getting-started/","text":"RDS and Fargate Round - Getting Started Accessing AWS Event Engine To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Click here to proceed to the RDS Phase of the workshop. Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional ) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"RDS and Fargate Round - Getting Started"},{"location":"RDSFargate/getting-started/#rds-and-fargate-round-getting-started","text":"","title":"RDS and Fargate Round - Getting Started"},{"location":"RDSFargate/getting-started/#accessing-aws-event-engine","text":"To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Click here to proceed to the RDS Phase of the workshop. Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional ) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Accessing AWS Event Engine"}]}